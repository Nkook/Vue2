{"version":3,"file":"vue.js","sources":["../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["// 5-3\nclass Observer {\n    constructor(data) {\n        // 对这个数据的每个属性都劫持\n        // Object.defineProperty只能劫持已经存在的属性，后增的、或删除的是不知道的。（vue2里会为此单独写一些api $set $delete）\n        // 遍历这个对象\n        this.walk(data)\n    }\n    walk(data) { // 循环对象，重新定义属性，对属性依次劫持\n        // 重新定义属性 （性能差，相当于把属性重写了）\n        // defineReactive方法 把data这个数据定义成响应式的，属性是当前的key，值是当前的data[key]。这个方法没写在类里，写在外面可以导出，其他地方也可以使用。\n        Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\n    }\n}\n\n// 5-4\nexport function defineReactive(target, key, value) { // 属性劫持。闭包，里面的函数使用外面的value，这个变量不能被销毁\n    // 5-8 深度属性劫持。针对某个属性值还是个对象\n    observe(value) // 对所有的对象都进行属性劫持。\n    Object.defineProperty(target, key, {\n        get() { // 取值的时候会执行get\n            console.log('用户取值了')\n            return value\n        },\n        set(newValue) { // 修改的时候会执行set\n            console.log('用户设置值了')\n            if (newValue === value) return\n            value = newValue\n        }\n    })\n\n}\n\nexport function observe(data) {\n    // 对data这个对象进行劫持\n    // 5-1 判断是否是对象 // 只对对象进行劫持\n    if (typeof data !== 'object' || data == null) {\n        return\n    }\n\n    // 5-2 如果一个对象被劫持过了，那就不需要再被劫持了（要判断一个对象是否被劫持过，可以增添一个实例，用实例来判断是否被劫持过）\n    // 在内部又创建了一个类，这个类专门去观测数据的。如果这个数据被观测过，那么它的实例就是这个类\n    // 对data这个数据进行观测\n    return new Observer(data)\n\n}","import { observe } from \"./observe/index\"\n\nexport function initState(vm) {\n    const opts = vm.$options // 获取所有的选项\n    // 3. 如果选项中有data属性，则做数据初始化\n    if (opts.data) {\n        initData(vm)\n    }\n}\n// 4. 数据初始化\nfunction initData(vm) {\n    let data = vm.$options.data // data可能是函数和对象\n    data = typeof data === 'function' ? data.call(vm) : data // data是用户返回的对象\n    console.log(data)\n\n    // 5-5\n    // 把对象放在了实例上，并对这个对象进行了观测。此时去打印vm，会发现有个_data属性下面有name和age及其对应的get和set；但是取值需要通过vm._data.name取，无法直接通过vm.name取值\n    vm._data = data // 我将返回的对象放到了_data上\n\n    // 5. 对数据进行劫持\n    // vue2采用了一个api defineProperty\n    // 提供一个方法observe 去观测data数据: 响应式模块\n    observe(data)\n\n    // 5-6 想通过vm.xxx直接取值，需要将vm_data 用vm来代理就可以了。自己定义个方法\n    for(let key in data) {\n        proxy(vm, '_data', key) // 代理实例vm上的某个属性key叫_data。其实就是代理_data这个属性\n    }\n\n}\n\n// 5-7\nfunction proxy(vm, target, key) {\n    // 给vm对象，添加一个属性key，并给每个属性增加存取描述符属性\n    Object.defineProperty(vm, key, { // vm.name\n        get() {\n            return vm[target][key]   // vm._data.name\n        },\n        set(newValue) {\n            vm[target][key] = newValue\n        }\n    })\n}\n\n// 到这里就有两次数据劫持，一次是把用户的数据进行了属性劫持，一次是代理，当取值的时候代理到了某个值","import { initState } from \"./state\"\n\nexport function initMixin(Vue) { // 就是给Vue增加init方法\n    Vue.prototype._init = function(options) { // 用于初始化操作\n        // vue vm.$options 就是获取用户的配置\n        // 我们使用 vue的时候，所有以$开头的都是vue自己的属性。$nextTick $data $attr....\n        // 1. 把这个options放在实例上，在其他的方法里也可以拿到了。\n        const vm = this // 将实例this赋值给vm\n        vm.$options = options // 将用户的选项挂载到实例上\n\n        // 2. 初始化状态：data 事件 计算属性等\n        initState(vm)\n\n    }\n}\n\n","// class类是将所有的方法都耦合在一起不好维护\n// vue通过构造函数的方式，在其构造函数prototype上去添加方法，可以在多个文件去操作\n\nimport { initMixin } from \"./init\"\n\nfunction Vue(options) { // options就是用户的选项\n    this._init(options) // 默认就调用了init\n}\n\n// 把原型方法扩展成一个个函数\ninitMixin(Vue) // 扩展了init方法\n\nexport default Vue"],"names":["Observer","constructor","data","walk","Object","keys","forEach","key","defineReactive","target","value","observe","defineProperty","get","console","log","set","newValue","initState","vm","opts","$options","initData","call","_data","proxy","initMixin","Vue","prototype","_init","options"],"mappings":"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"}